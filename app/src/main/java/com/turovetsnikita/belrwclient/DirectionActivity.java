<<<<<<< Updated upstream
package com.turovetsnikita.belrwclient;

import android.animation.ArgbEvaluator;
import android.animation.ObjectAnimator;
import android.app.Activity;
import android.app.DatePickerDialog;
import android.content.ContentValues;
import android.content.Context;
import android.content.ComponentName;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.location.Address;
import android.location.Geocoder;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.AsyncTask;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.support.design.widget.CoordinatorLayout;
import android.support.design.widget.NavigationView;
import android.support.design.widget.Snackbar;
import android.support.design.widget.TextInputLayout;
import android.support.v4.content.ContextCompat;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.AppCompatButton;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.view.inputmethod.InputMethodManager;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.AutoCompleteTextView;
import android.widget.Toast;

import org.jsoup.Connection;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Random;

import com.turovetsnikita.belrwclient.adapters.ItemClickSupport;
import com.turovetsnikita.belrwclient.data.AppBase;
import com.turovetsnikita.belrwclient.data.AppBase.RecentDirections;
import com.turovetsnikita.belrwclient.data.AppDbHelper;


//TODO: min API operability checked - 19 (4.4)
//TODO: не проработаны ладшафтные ориентации
//TODO: избавитьсся от AlertDialog
//TODO: уведомления об отправлении/скором прибытии

public class DirectionActivity extends AppCompatActivity
        implements NavigationView.OnNavigationItemSelectedListener {
    AutoCompleteTextView MultiEditText, MultiEditText2;
    TextInputLayout MultiEditTextLayout, MultiEditTextLayout2;
    EditText mDate;
    AppCompatButton search_button,swap_button;
    RecyclerView mrv1;
    ArrayList<Recent> recent = new ArrayList<>(15);
    LinearLayoutManager llm;
    RecentRVAdapter adapter;
    Locale russian = new Locale("ru");
    Calendar date = Calendar.getInstance();
    SimpleDateFormat df1 = new SimpleDateFormat("EE, dd MMM", russian);

    Date mx; //выбранная дата
    long st,en;
    private CoordinatorLayout coordLayout;
    Context context = DirectionActivity.this;
    private static long back_pressed;
    int LENGTH_VERY_LONG = 5000;
    SharedPreferences sp;

    private AppDbHelper mDbHelper;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        setTheme(R.style.AppTheme_NoActionBar);
        super.onCreate(savedInstanceState);
        setContentView(R.layout.nav_view_activity);
        coordLayout = (CoordinatorLayout) findViewById(R.id.coordLayout);

        final String[] mStations = { //TODO: Полный список станций РБ (создать БД с зарубежьем и кодами - 20000 строк) или выборочно
                "Авраамовская, Беларусь",
                "Адамово, Беларусь",
                "Адровка, Беларусь",
                "Александровка, Беларусь",
                "Алеша, Беларусь",
                "Альховка, Беларусь",
                "Андреевичи, Беларусь",
                "Антоновка, Беларусь",
                "Антополь, Беларусь",
                "Антополь, Беларусь",
                "Анусино, Беларусь",
                "Апалоновка, Беларусь",
                "Асановский, Беларусь",
                "Асеевка, Беларусь",
                "Асино, Беларусь",
                "Аульс, Беларусь",
                "Бабино, Беларусь",
                "Бабичи, Беларусь",
                "Баравуха, Беларусь",
                "Барановичи, Беларусь",
                "Барановичи-Полесские, Беларусь",
                "Барановичи-Северные, Беларусь",
                "Барановичи-Центральные, Беларусь",
                "Баркалабово, Беларусь",
                "Барсуки, Беларусь",
                "Барсуки, Беларусь",
                "Бастуны, Беларусь",
                "Батали, Беларусь",
                "Батча, Беларусь",
                "Безверховичи, Беларусь",
                "Белогруда, Беларусь",
                "Белоозерск, Беларусь",
                "Белорусь, Беларусь",
                "Белосельский, Беларусь",
                "Белынковичи, Беларусь",
                "Бель, Беларусь",
                "Беняконе, Беларусь",
                "Бережа, Беларусь",
                "Бережок, Беларусь",
                "Береза, Беларусь",
                "Береза Город, Беларусь",
                "Береза-Картуская, Беларусь",
                "Березина, Беларусь",
                "Березинское, Беларусь",
                "Березки, Беларусь",
                "Березовая Роща, Беларусь",
                "Березовцы, Беларусь",
                "Берестовица, Беларусь",
                "Бернады, Беларусь",
                "Бибковщина, Беларусь",
                "Бигосово, Беларусь",
                "Бирюличи, Беларусь",
                "Благовичи, Беларусь",
                "Блажевщина, Беларусь",
                "Блок Пост 522 Км, Беларусь",
                "Блужа, Беларусь",
                "Бобр, Беларусь",
                "Бобра, Беларусь",
                "Бобрич, Беларусь",
                "Бобруйск, Беларусь",
                "Бобруйск Город, Беларусь",
                "Бобры, Беларусь",
                "Богданов, Беларусь",
                "Богутичи, Беларусь",
                "Богушевка, Беларусь",
                "Богушевская, Беларусь",
                "Бокуны, Беларусь",
                "Больница, Беларусь",
                "Больница, Беларусь",
                "Бони, Беларусь",
                "Борисов, Беларусь",
                "Борки, Беларусь",
                "Борковичи, Беларусь",
                "Боровая, Беларусь",
                "Боровка, Беларусь",
                "Боровое, Беларусь",
                "Боровцы, Беларусь",
                "Борречье, Беларусь",
                "Бостынь, Беларусь",
                "Бояри, Беларусь",
                "Брест Южный, Беларусь",
                "Брест-Восточный, Беларусь",
                "Брест-Полесский, Беларусь",
                "Брест-Северный, Беларусь",
                "Брест-Центральный, Беларусь",
                "Бринево, Беларусь",
                "Брицаловичи, Беларусь",
                "Бродище, Беларусь",
                "Брожа, Беларусь",
                "Бронислав, Беларусь",
                "Бронная Гора, Беларусь",
                "Брузги, Беларусь",
                "Буда-Кошелевская, Беларусь",
                "Будслав, Беларусь",
                "Буды, Беларусь",
                "Буйничи, Беларусь",
                "Бульба, Беларусь",
                "Бумажково, Беларусь",
                "Бурбин, Беларусь",
                "Буслы, Беларусь",
                "Бухличи, Беларусь",
                "Бушевка, Беларусь",
                "Бытень, Беларусь",
                "Быхов, Беларусь",
                "Бычиха, Беларусь",
                "Вальки, Беларусь",
                "Ванилевичи, Беларусь",
                "Василевичи, Беларусь",
                "Васковщина, Беларусь",
                "Ведрич, Беларусь",
                "Веленский, Беларусь",
                "Вендеж, Беларусь",
                "Вендриж, Беларусь",
                "Верасы, Беларусь",
                "Верба, Беларусь",
                "Верейцы, Беларусь",
                "Веремейки, Беларусь",
                "Вереники, Беларусь",
                "Веретеи, Беларусь",
                "Веропольцы, Беларусь",
                "Верхи, Беларусь",
                "Верхнедвинск, Беларусь",
                "Верхутино, Беларусь",
                "Веселовский, Беларусь",
                "Ветрино, Беларусь",
                "Видибор, Беларусь",
                "Вилейка, Беларусь",
                "Вирский, Беларусь",
                "Витебск, Беларусь",
                "Влодава, Беларусь",
                "Войгняты, Беларусь",
                "Войтешин, Беларусь",
                "Войтковичи, Беларусь",
                "Волковыск-Город, Беларусь",
                "Волковыск-Центральный, Беларусь",
                "Воловники, Беларусь",
                "Володьки, Беларусь",
                "Воложин, Беларусь",
                "Волоки, Беларусь",
                "Волосковня, Беларусь",
                "Волот, Беларусь",
                "Волотова, Беларусь",
                "Волчковичи, Беларусь",
                "Воничи, Беларусь",
                "Вороново, Беларусь",
                "Воропаево, Беларусь",
                "Воротище, Беларусь",
                "Восток, Беларусь",
                "Вулька, Беларусь",
                "Вулька-Антопольская, Беларусь",
                "Выгода, Беларусь",
                "Выдерщина, Беларусь",
                "Выдрея, Беларусь",
                "Вылазы, Беларусь",
                "Высокое Город, Беларусь",
                "Высоколитовск, Беларусь",
                "Вязынка, Беларусь",
                "Вятны, Беларусь",
                "Гавья, Беларусь",
                "Гай, Беларусь",
                "Ганцевичи, Беларусь",
                "Гаути, Беларусь",
                "Геолог, Беларусь",
                "Гибуличи, Беларусь",
                "Глебова Рудня, Беларусь",
                "Глубокое, Беларусь",
                "Глушанино, Беларусь",
                "Глядки, Беларусь",
                "Годутишки, Беларусь",
                "Голевицы, Беларусь",
                "Голошевка, Беларусь",
                "Голынец, Беларусь",
                "Голынка, Беларусь",
                "Гомель Нечетный, Беларусь",
                "Гомель Сев, Беларусь",
                "Гомель Чет, Беларусь",
                "Гомель-Пассажирский, Беларусь",
                "Гомоновка, Беларусь",
                "Гончары, Беларусь",
                "Гордуны, Беларусь",
                "Городец, Беларусь",
                "Городея, Беларусь",
                "Городище, Беларусь",
                "Городнянский, Беларусь",
                "Городок, Беларусь",
                "Горожа, Беларусь",
                "Горочичи, Беларусь",
                "Горынь, Беларусь",
                "Горяны, Беларусь",
                "Гп Свислочь, Беларусь",
                "Грабовка, Беларусь",
                "Гребенево, Беларусь",
                "Грибачи, Беларусь",
                "Гриньки, Беларусь",
                "Грицевец, Беларусь",
                "Гришаны, Беларусь",
                "Гродзянка, Беларусь",
                "Гродно, Беларусь",
                "Громы, Беларусь",
                "Грушевка, Беларусь",
                "Гряда, Беларусь",
                "Гудогай, Беларусь",
                "Гуды, Беларусь",
                "Гута, Беларусь",
                "Гутно, Беларусь",
                "Далекий, Беларусь",
                "Данилов Мост, Беларусь",
                "Даниловцы, Беларусь",
                "Дараганово, Беларусь",
                "Дарливое, Беларусь",
                "Дары, Беларусь",
                "Дачная, Беларусь",
                "Дачное, Беларусь",
                "Дачный, Беларусь",
                "Дашковка, Беларусь",
                "Дворец, Беларусь",
                "Дегтяны, Беларусь",
                "Дегтяревка, Беларусь",
                "Дедново, Беларусь",
                "Дембово, Беларусь",
                "Демехи, Беларусь",
                "Депо, Беларусь",
                "Деповской, Беларусь",
                "Деревцы, Беларусь",
                "Детковичи, Беларусь",
                "Дикаловка, Беларусь",
                "Дитва, Беларусь",
                "Дитрики, Беларусь",
                "Добруш, Беларусь",
                "Довгердишки, Беларусь",
                "Доманово, Беларусь",
                "Домановский, Беларусь",
                "Домачево Город, Беларусь",
                "Домашаны, Беларусь",
                "Домашевичи, Беларусь",
                "Дрануха, Беларусь",
                "Древск, Беларусь",
                "Дретунь, Беларусь",
                "Дрибин, Беларусь",
                "Дричин, Беларусь",
                "Дрогичин, Беларусь",
                "Дрогичин Город, Беларусь",
                "Друть, Беларусь",
                "Друя, Беларусь",
                "Дубица, Беларусь",
                "Дубно, Беларусь",
                "Дубновичи, Беларусь",
                "Дубок, Беларусь",
                "Дубравы, Беларусь",
                "Дубровичи, Беларусь",
                "Дударево, Беларусь",
                "Дудичи, Беларусь",
                "Дятловичи, Беларусь",
                "Дятлово, Беларусь",
                "Езерище, Беларусь",
                "Елизово, Беларусь",
                "Ельск, Беларусь",
                "Еремино, Беларусь",
                "Ермаловка, Беларусь",
                "Жабинка, Беларусь",
                "Ждановичи, Беларусь",
                "Желудок, Беларусь",
                "Жемчужина, Беларусь",
                "Жердь, Беларусь",
                "Жеребковичи, Беларусь",
                "Жестянка, Беларусь",
                "Жефарово, Беларусь",
                "Жиличи, Беларусь",
                "Житковичи, Беларусь",
                "Житомля, Беларусь",
                "Жлобин, Беларусь",
                "Жлобин Северный, Беларусь",
                "Жлобин Сортировочный, Беларусь",
                "Жлобин-Западный, Беларусь",
                "Жлобин-Подольский, Беларусь",
                "Жодино, Беларусь",
                "Жодино Южное, Беларусь",
                "Журавинка, Беларусь",
                "Журбин, Беларусь",
                "Журки, Беларусь",
                "Забабье, Беларусь",
                "Забозье, Беларусь",
                "Заболотинка, Беларусь",
                "Завадичи, Беларусь",
                "Загатье, Беларусь",
                "Загорбашье, Беларусь",
                "Загорье, Беларусь",
                "Заградье, Беларусь",
                "Зазерки, Беларусь",
                "Заказанка, Беларусь",
                "Закопытье, Беларусь",
                "Закрутин, Беларусь",
                "Залесская-Слобода, Беларусь",
                "Залесье, Беларусь",
                "Залучье, Беларусь",
                "Замосточье, Беларусь",
                "Замошье, Беларусь",
                "Замошье, Беларусь",
                "Замужанье, Беларусь",
                "Заозерщина, Беларусь",
                "Заольша, Беларусь",
                "Западное, Беларусь",
                "Заполье, Беларусь",
                "Заречное, Беларусь",
                "Засковичи, Беларусь",
                "Заслоново, Беларусь",
                "Защобье, Беларусь",
                "Збунин, Беларусь",
                "Звезда, Беларусь",
                "Зеленое, Беларусь",
                "Зеленый Остров, Беларусь",
                "Зельва, Беларусь",
                "Знаменка, Беларусь",
                "Зори, Беларусь",
                "Зубки, Беларусь",
                "Зубры, Беларусь",
                "Зяби, Беларусь",
                "Зябки, Беларусь",
                "Зябровка, Беларусь",
                "Иваки, Беларусь",
                "Ивацевичи, Беларусь",
                "Ивная, Беларусь",
                "Идолты, Беларусь",
                "Избынь, Беларусь",
                "Илово, Беларусь",
                "Институт Культуры, Беларусь",
                "Ипуть, Беларусь",
                "Исса, Беларусь",
                "Истопки, Беларусь",
                "Кабаки, Беларусь",
                "Казимирово, Беларусь",
                "Каледино, Беларусь",
                "Калий 1, Беларусь",
                "Калий 3, Беларусь",
                "Калининский, Беларусь",
                "Калинковичи, Беларусь",
                "Калинковичи Вост, Беларусь",
                "Калинковичи Зап, Беларусь",
                "Калинковичи Южн, Беларусь",
                "Калыбовка, Беларусь",
                "Камайка, Беларусь",
                "Каменная, Беларусь",
                "Камень, Беларусь",
                "Каплица, Беларусь",
                "Каровышень, Беларусь",
                "Каролевичи, Беларусь",
                "Кастрычник, Беларусь",
                "Кацуры, Беларусь",
                "Качаново, Беларусь",
                "Кветка, Беларусь",
                "Кираево, Беларусь",
                "Кирпичный Завод, Беларусь",
                "Кирьяновцы, Беларусь",
                "Киселевичи, Беларусь",
                "Кленки, Беларусь",
                "Клецк, Беларусь",
                "Климовичи, Беларусь",
                "Клинск, Беларусь",
                "Клишевичи, Беларусь",
                "Клыповщина, Беларусь",
                "Княгинин, Беларусь",
                "Княжица, Беларусь",
                "Князюковка, Беларусь",
                "Кобелки, Беларусь",
                "Кобрин, Беларусь",
                "Ковали, Беларусь",
                "Кодень, Беларусь",
                "Козенки, Беларусь",
                "Козловичи, Беларусь",
                "Козлякевичи, Беларусь",
                "Койданово, Беларусь",
                "Колодищи, Беларусь",
                "Колосово, Беларусь",
                "Колядичи, Беларусь",
                "Комаровка, Беларусь",
                "Комарово, Беларусь",
                "Коммунары, Беларусь",
                "Константинов Двор, Беларусь",
                "Копань, Беларусь",
                "Копты, Беларусь",
                "Копцевичи, Беларусь",
                "Копысь, Беларусь",
                "Кореневка, Беларусь",
                "Коржевка, Беларусь",
                "Коробчицы, Беларусь",
                "Коссово-Полесское, Беларусь",
                "Костени, Беларусь",
                "Костюковка, Беларусь",
                "Коханово, Беларусь",
                "Кошелево, Беларусь",
                "Кошь, Беларусь",
                "Кравцовка, Беларусь",
                "Краево, Беларусь",
                "Красная Буда, Беларусь",
                "Красная Горка, Беларусь",
                "Красновка, Беларусь",
                "Красное Знамя, Беларусь",
                "Красноручье, Беларусь",
                "Красный Берег, Беларусь",
                "Красный Бережок, Беларусь",
                "Красный Брод, Беларусь",
                "Крестьянка, Беларусь",
                "Кривичи, Беларусь",
                "Кринично, Беларусь",
                "Кричев 1, Беларусь",
                "Кричев 2, Беларусь",
                "Крошино, Беларусь",
                "Круговец, Беларусь",
                "Крулевщизна, Беларусь",
                "Крупки, Беларусь",
                "Крыжовка, Беларусь",
                "Крыница, Беларусь",
                "Крынки, Беларусь",
                "Ксты, Беларусь",
                "Кулени, Беларусь",
                "Кульгаи, Беларусь",
                "Кульшичи, Беларусь",
                "Курасовщина, Беларусь",
                "Курган, Беларусь",
                "Куренец, Беларусь",
                "Куток, Беларусь",
                "Кучкуны, Беларусь",
                "Лазовики, Беларусь",
                "Лазурная, Беларусь",
                "Лапичи, Беларусь",
                "Ларищево, Беларусь",
                "Ластоянцы, Беларусь",
                "Лахва, Беларусь",
                "Лебяды, Беларусь",
                "Лебяжий, Беларусь",
                "Лемница, Беларусь",
                "Ленинодар, Беларусь",
                "Лепель, Беларусь",
                "Лесная, Беларусь",
                "Летцы, Беларусь",
                "Лида, Беларусь",
                "Лиозно, Беларусь",
                "Липа, Беларусь",
                "Липинки, Беларусь",
                "Липленка, Беларусь",
                "Липники, Беларусь",
                "Липово, Беларусь",
                "Лисички, Беларусь",
                "Лиски, Беларусь",
                "Листопады, Беларусь",
                "Литва, Беларусь",
                "Лихачи, Беларусь",
                "Лобачи, Беларусь",
                "Лобча, Беларусь",
                "Ловча, Беларусь",
                "Ловша, Беларусь",
                "Логвины, Беларусь",
                "Лозки, Беларусь",
                "Локомотивное Депо, Беларусь",
                "Ломачино, Беларусь",
                "Лосвида, Беларусь",
                "Лосево, Беларусь",
                "Лоси, Беларусь",
                "Лососна, Беларусь",
                "Лотва, Беларусь",
                "Лошица, Беларусь",
                "Лудчицы, Беларусь",
                "Лужесно, Беларусь",
                "Лужки, Беларусь",
                "Лукское, Беларусь",
                "Лукьяновка, Беларусь",
                "Лунинец, Беларусь",
                "Луполово, Беларусь",
                "Лучеса, Беларусь",
                "Лынтупы, Беларусь",
                "Лычковского, Беларусь",
                "Лыщицы, Беларусь",
                "Любань, Беларусь",
                "Любожердье, Беларусь",
                "Людиневичи, Беларусь",
                "Люсино, Беларусь",
                "Люта, Беларусь",
                "Люща, Беларусь",
                "Лясы, Беларусь",
                "Ляховичи, Беларусь",
                "Ляховщина, Беларусь",
                "Майский, Беларусь",
                "Макановичи, Беларусь",
                "Малевичи, Беларусь",
                "Малинники, Беларусь",
                "Малорито, Беларусь",
                "Мальковичи, Беларусь",
                "Малятичи, Беларусь",
                "Мартюхово, Беларусь",
                "Масленники, Беларусь",
                "Масюковщина, Беларусь",
                "Матеевичи, Беларусь",
                "Мачулищи, Беларусь",
                "Машково, Беларусь",
                "Медведка, Беларусь",
                "Мезиновка, Беларусь",
                "Мелесница, Беларусь",
                "Мельковщизна, Беларусь",
                "Мелькомбинат, Беларусь",
                "Мельники, Беларусь",
                "Металлург, Беларусь",
                "Меховое, Беларусь",
                "Микашевичи, Беларусь",
                "Микелевщина, Беларусь",
                "Микуличи, Беларусь",
                "Милое, Беларусь",
                "Мильча, Беларусь",
                "Минойты, Беларусь",
                "Минск, Беларусь",
                "Минск Восточный, Беларусь",
                "Минск Сортировочный, Беларусь",
                "Минское Море, Беларусь",
                "Минск-Пассажирский, Беларусь",
                "Минск-Северный, Беларусь",
                "Минск-Южный, Беларусь",
                "Миоры, Беларусь",
                "Мирадино, Беларусь",
                "Михалки, Беларусь",
                "Михановичи, Беларусь",
                "Михеевичи, Беларусь",
                "Михново, Беларусь",
                "Мицкевичи, Беларусь",
                "Могилев 1, Беларусь",
                "Могилев 2, Беларусь",
                "Могилев 3, Беларусь",
                "Можеевка, Беларусь",
                "Мозырь, Беларусь",
                "Мокрое, Беларусь",
                "Молодежный, Беларусь",
                "Молодечно, Беларусь",
                "Молодечно Ф, Беларусь",
                "Молотковичи, Беларусь",
                "Молчадь, Беларусь",
                "Монтовты, Беларусь",
                "Мордычи, Беларусь",
                "Мормаль, Беларусь",
                "Мороськи, Беларусь",
                "Морочь, Беларусь",
                "Мосты, Беларусь",
                "Мотыкалы Большие, Беларусь",
                "Мотыкалы, Беларусь",
                "Мошны, Беларусь",
                "Мошок, Беларусь",
                "Мстибово, Беларусь",
                "Муляровка, Беларусь",
                "Мурованка, Беларусь",
                "Мытва, Беларусь",
                "Мышанка, Беларусь",
                "Мясота, Беларусь",
                "Нагораны, Беларусь",
                "Нахов, Беларусь",
                "Негорелое, Беларусь",
                "Некраши, Беларусь",
                "Неман, Беларусь",
                "Немейщизна, Беларусь",
                "Немоница, Беларусь",
                "Несета, Беларусь",
                "Нестеровичи, Беларусь",
                "Нивки, Беларусь",
                "Нивы, Беларусь",
                "Никольск, Беларусь",
                "Никольский Переезд, Беларусь",
                "Новая Дуброва, Беларусь",
                "Новая Жизнь, Беларусь",
                "Новая Нива, Беларусь",
                "Новая Рудня, Беларусь",
                "Новобелицкая, Беларусь",
                "Новогорки, Беларусь",
                "Новодворцы, Беларусь",
                "Новодруцк, Беларусь",
                "Новое Село, Беларусь",
                "Новоельня, Беларусь",
                "Новолиповский, Беларусь",
                "Новосады, Беларусь",
                "Новоселки, Беларусь",
                "Носилово, Беларусь",
                "Носовичи, Беларусь",
                "О.п.ярево, Беларусь",
                "Оболь, Беларусь",
                "Огдемер, Беларусь",
                "Оголичи, Беларусь",
                "Оземля, Беларусь",
                "Озерище, Беларусь",
                "Озерная, Беларусь",
                "Озерница, Беларусь",
                "Октябрьский, Беларусь",
                "Олехновичи, Беларусь",
                "Ольша, Беларусь",
                "Омельня, Беларусь",
                "Оп Дедовка, Беларусь",
                "Оп Железнодорожный, Беларусь",
                "Оп Костени, Беларусь",
                "Оранчицы, Беларусь",
                "Орловичи, Беларусь",
                "Орсичи, Беларусь",
                "Орша Ф, Беларусь",
                "Орша-Восточная, Беларусь",
                "Орша-Западная, Беларусь",
                "Орша-Центральная, Беларусь",
                "Осиновка, Беларусь",
                "Осиповичи 1, Беларусь",
                "Осиповичи 2, Беларусь",
                "Осиповичи 3, Беларусь",
                "Осиповщина, Беларусь",
                "Осмоловичи, Беларусь",
                "Осов, Беларусь",
                "Осовец, Беларусь",
                "Осово, Беларусь",
                "Ост.пункт 11 Км, Беларусь",
                "Ост.пункт 143 Км, Беларусь",
                "Ост.пункт 15 Км, Беларусь",
                "Ост.пункт 159 Км, Беларусь",
                "Ост.пункт 185 Км, Беларусь",
                "Ост.пункт 19 Км, Беларусь",
                "Ост.пункт 25 Км, Беларусь",
                "Ост.пункт 26 Км, Беларусь",
                "Ост.пункт 274 Км, Беларусь",
                "Ост.пункт 331 Км, Беларусь",
                "Ост.пункт 444 Км, Беларусь",
                "Останковичи, Беларусь",
                "Оточка, Беларусь",
                "Отцеда, Беларусь",
                "Ошмяны, Беларусь",
                "Павловичи, Беларусь",
                "Парафьянов, Беларусь",
                "Парк N1, Беларусь",
                "Парк N3, Беларусь",
                "Парохонск, Беларусь",
                "Пасека, Беларусь",
                "Перевалочный, Беларусь",
                "Переезд, Беларусь",
                "Переможник, Беларусь",
                "Пересельцы, Беларусь",
                "Пескаришки, Беларусь",
                "Петуховщина, Беларусь",
                "Печинский, Беларусь",
                "Пигановичи, Беларусь",
                "Пинск, Беларусь",
                "Пичевка, Беларусь",
                "Платформа Березина, Беларусь",
                "Плесы, Беларусь",
                "Плетяничи, Беларусь",
                "Плехово, Беларусь",
                "Плудим, Беларусь",
                "Победа, Беларусь",
                "Повстынь, Беларусь",
                "Погодино, Беларусь",
                "Погорельцы, Беларусь",
                "Погост, Беларусь",
                "Подлесье, Беларусь",
                "Подлужки, Беларусь",
                "Подозерцы, Беларусь",
                "Подсвилье, Беларусь",
                "Подстанция, Беларусь",
                "Пожежин, Беларусь",
                "Поздняково, Беларусь",
                "Полеваче, Беларусь",
                "Полесский Парк, Беларусь",
                "Полесье, Беларусь",
                "Полово, Беларусь",
                "Полонка, Беларусь",
                "Полота, Беларусь",
                "Полоцк, Беларусь",
                "Полочаны, Беларусь",
                "Полыковские Хутора, Беларусь",
                "Помыслище, Беларусь",
                "Понизов, Беларусь",
                "Понятичи, Беларусь",
                "Поречаны, Беларусь",
                "Поречье, Беларусь",
                "Порплище, Беларусь",
                "Пост 1, Беларусь",
                "Пост 2, Беларусь",
                "Пост N1, Беларусь",
                "Пост Мухавец, Беларусь",
                "Поставы, Беларусь",
                "Постхороброво, Беларусь",
                "Потаповка, Беларусь",
                "Прибор, Беларусь",
                "Приборово, Беларусь",
                "Прибужье, Беларусь",
                "Прилуки, Беларусь",
                "Прилучино, Беларусь",
                "Приозерный, Беларусь",
                "Припять, Беларусь",
                "Приямино, Беларусь",
                "Прокшино, Беларусь",
                "Пролески, Беларусь",
                "Пролетарская Победа, Беларусь",
                "Прудовка, Беларусь",
                "Прудок, Беларусь",
                "Прудок, Беларусь",
                "Пруды, Беларусь",
                "Птичь, Беларусь",
                "Птичь, Беларусь",
                "Пугачево, Беларусь",
                "Пуховичи, Беларусь",
                "Пуща, Беларусь",
                "Пхов, Беларусь",
                "Пячковичи, Беларусь",
                "Рабкор, Беларусь",
                "Равнополье, Беларусь",
                "Радеево, Беларусь",
                "Радиаторный, Беларусь",
                "Радошковичи, Беларусь",
                "Радуга, Беларусь",
                "Развадово, Беларусь",
                "Разлоги, Беларусь",
                "Ракитно, Беларусь",
                "Раклевцы, Беларусь",
                "Рандовский, Беларусь",
                "Рассвет, Беларусь",
                "Ратмировичи, Беларусь",
                "Ратомка, Беларусь",
                "Ребуса, Беларусь",
                "Рейтанов, Беларусь",
                "Ректа, Беларусь",
                "Ремество, Беларусь",
                "Реста, Беларусь",
                "Речица, Беларусь",
                "Речица, Беларусь",
                "Рзд Бениславского, Беларусь",
                "Ритм, Беларусь",
                "Рогачев, Беларусь",
                "Рожанка, Беларусь",
                "Романовичи, Беларусь",
                "Романы, Беларусь",
                "Роматово, Беларусь",
                "Ропнянская, Беларусь",
                "Росляки, Беларусь",
                "Рось, Беларусь",
                "Роща, Беларусь",
                "Рудавка, Беларусь",
                "Руденск, Беларусь",
                "Рудея, Беларусь",
                "Рудня, Беларусь",
                "Руднянский, Беларусь",
                "Румино, Беларусь",
                "Русаки, Беларусь",
                "Русино, Беларусь",
                "Рыбница, Беларусь",
                "Рыбцы, Беларусь",
                "Рыжковичи, Беларусь",
                "Савелинки, Беларусь",
                "Савичи, Беларусь",
                "Савичи, Беларусь",
                "Садки, Беларусь",
                "Садовый, Беларусь",
                "Сады, Беларусь",
                "Саки, Беларусь",
                "Салатье, Беларусь",
                "Салтановка, Беларусь",
                "Самулки, Беларусь",
                "Сарьянка, Беларусь",
                "Сахарный Завод, Беларусь",
                "Сверково, Беларусь",
                "Светлогорск-На-Березин, Беларусь",
                "Светоч, Беларусь",
                "Свислочь, Беларусь",
                "Свольно, Беларусь",
                "Северный, Беларусь",
                "Севрюки, Беларусь",
                "Седча, Беларусь",
                "Секровщина, Беларусь",
                "Селивоновка, Беларусь",
                "Сельное, Беларусь",
                "Селютичи, Беларусь",
                "Селяхи, Беларусь",
                "Семашки, Беларусь",
                "Семуковичи, Беларусь",
                "Сенкевичи, Беларусь",
                "Сенненская, Беларусь",
                "Сенозавод, Беларусь",
                "Середняки, Беларусь",
                "Сечки, Беларусь",
                "Сидоровка, Беларусь",
                "Синюга, Беларусь",
                "Синяво, Беларусь",
                "Ситница, Беларусь",
                "Ситница Оп, Беларусь",
                "Скидель, Беларусь",
                "Скоки, Беларусь",
                "Скрестины, Беларусь",
                "Скрибовцы, Беларусь",
                "Славное, Беларусь",
                "Слобода, Беларусь",
                "Слободка, Беларусь",
                "Слободской, Беларусь",
                "Словечно, Беларусь",
                "Слоним, Беларусь",
                "Слуцк, Беларусь",
                "Случь, Беларусь",
                "Смолевичи, Беларусь",
                "Смольяны, Беларусь",
                "Сморгонь, Беларусь",
                "Снитово, Беларусь",
                "Соболевка, Беларусь",
                "Советский, Беларусь",
                "Сож, Беларусь",
                "Соколка, Беларусь",
                "Солигорск, Беларусь",
                "Солоное, Беларусь",
                "Солы, Беларусь",
                "Сортировочный Парк, Беларусь",
                "Сосница, Беларусь",
                "Сосновка, Беларусь",
                "Сосновый Бор, Беларусь",
                "Стайки, Беларусь",
                "Станьково, Беларусь",
                "Старая Весь, Беларусь",
                "Старая Рудня, Беларусь",
                "Старина, Беларусь",
                "Старое Село, Беларусь",
                "Старосельский, Беларусь",
                "Старушки, Беларусь",
                "Старые Дороги, Беларусь",
                "Степянка, Беларусь",
                "Столбцы, Беларусь",
                "Столпы, Беларусь",
                "Стоялово, Беларусь",
                "Страдичи, Беларусь",
                "Страж, Беларусь",
                "Строитель, Беларусь",
                "Суша, Беларусь",
                "Талька, Беларусь",
                "Татарка, Беларусь",
                "Татарщизна, Беларусь",
                "Тачанка, Беларусь",
                "Тевли, Беларусь",
                "Текстильщик, Беларусь",
                "Телуша, Беларусь",
                "Темные Ляды, Беларусь",
                "Темный Лес, Беларусь",
                "Тереховка, Беларусь",
                "Терюха, Беларусь",
                "Техникум, Беларусь",
                "Тимирязев0, Беларусь",
                "Тимковичи, Беларусь",
                "Тихиничи, Беларусь",
                "Ткачи, Беларусь",
                "Токари, Беларусь",
                "Толочин, Беларусь",
                "Тощица, Беларусь",
                "Тракторный, Беларусь",
                "Троцилово, Беларусь",
                "Труд, Беларусь",
                "Туголица, Беларусь",
                "Турья, Беларусь",
                "Тышкевичи, Беларусь",
                "Тышковка, Беларусь",
                "Уболоть, Беларусь",
                "Уборок, Беларусь",
                "Ужлятино, Беларусь",
                "Уза, Беларусь",
                "Уздорники, Беларусь",
                "Узнаш, Беларусь",
                "Ульяновка, Беларусь",
                "Уречье, Беларусь",
                "Уть, Беларусь",
                "Уша, Беларусь",
                "Фабричный, Беларусь",
                "Факел, Беларусь",
                "Фаличи, Беларусь",
                "Фаниполь, Беларусь",
                "Фариново, Беларусь",
                "Федюки, Беларусь",
                "Фомино, Беларусь",
                "Халечино, Беларусь",
                "Хальч, Беларусь",
                "Харсы, Беларусь",
                "Хвоево, Беларусь",
                "Хвоецкое, Беларусь",
                "Хвойняны, Беларусь",
                "Хлусово, Беларусь",
                "Хлюстино, Беларусь",
                "Хмелевка, Беларусь",
                "Ходосы, Беларусь",
                "Хойники, Беларусь",
                "Холодники, Беларусь",
                "Хоново, Беларусь",
                "Хорошки, Беларусь",
                "Хотислав, Беларусь",
                "Цверма, Беларусь",
                "Цель, Беларусь",
                "Центролит, Беларусь",
                "Чаусы, Беларусь",
                "Чашники, Беларусь",
                "Чеерные Броды, Беларусь",
                "Чепино, Беларусь",
                "Червено, Беларусь",
                "Череток, Беларусь",
                "Черлена, Беларусь",
                "Черная Натопа, Беларусь",
                "Черницы, Беларусь",
                "Черноземовка, Беларусь",
                "Чернуха, Беларусь",
                "Чижовка, Беларусь",
                "Шаловичи, Беларусь",
                "Шарабаи, Беларусь",
                "Шарковщизна, Беларусь",
                "Шарыбовка, Беларусь",
                "Шахи, Беларусь",
                "Шахтерский, Беларусь",
                "Шепичи, Беларусь",
                "Шестеровка, Беларусь",
                "Шибеки, Беларусь",
                "Шипуличи, Беларусь",
                "Шклов, Беларусь",
                "Шумилино, Беларусь",
                "Шуховцы, Беларусь",
                "Щара, Беларусь",
                "Щежер, Беларусь",
                "Щербовка, Беларусь",
                "Щитники, Беларусь",
                "Экимань, Беларусь",
                "Энергетик, Беларусь",
                "Юбилейный, Беларусь",
                "Юратишки, Беларусь",
                "Юрковка, Беларусь",
                "Юровичи, Беларусь",
                "Юрцево, Беларусь",
                "Юхновичи, Беларусь",
                "Юшкевичи, Беларусь",
                "Юшки, Беларусь",
                "Яжевки, Беларусь",
                "Язвино, Беларусь",
                "Якимовка, Беларусь",
                "Яковчицы, Беларусь",
                "Якуба Колоса, Беларусь",
                "Янов-Полесский, Беларусь",
                "Ясельда, Беларусь",
                "Ясень, Беларусь",
                "Яхимовщина, Беларусь",
                "Яцуки, Беларусь",
                "Ящицы, Беларусь",
        };

        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        toolbar.setTitle(R.string.title_direction_activity);
        setSupportActionBar(toolbar); //setTitle строго до этой команды

        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        NavigationView navigationView = (NavigationView) findViewById(R.id.nav_view);

        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(
                this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close) {
            @Override
            public void onDrawerOpened(View drawerView) {
                // Code here will be triggered once the drawer open as we dont want anything to happen so we leave this blank
                HideKeybClearFocus();
            }
        };
        drawer.setDrawerListener(toggle);
        toggle.syncState();
        navigationView.setNavigationItemSelectedListener(this);

/*
        final IProfile profile = new ProfileDrawerItem().withName("Batman").withEmail("batman@gmail.com");

        // Create the AccountHeader
        AccountHeader headerResult = new AccountHeaderBuilder()
                .withActivity(this)
                .withCompactStyle(true)
                .withHeaderBackground(R.drawable.side_nav_bar)
                .addProfiles(
                        profile
                )
                .withSavedInstance(savedInstanceState)
                .build();
        PrimaryDrawerItem item1 = new PrimaryDrawerItem().withIdentifier(1).withName("R.string.drawer_item_home");
        SecondaryDrawerItem item2 = new SecondaryDrawerItem().withIdentifier(2).withName("R.string.drawer_item_settings");
        Drawer result = new DrawerBuilder()
                .withActivity(this)
                .withAccountHeader(headerResult)
                .withToolbar(toolbar)
                .addDrawerItems(
                        item1,
                        new DividerDrawerItem(),
                        item2,
                        new SecondaryDrawerItem()
                )
                .withOnDrawerItemClickListener(new Drawer.OnDrawerItemClickListener() {
                    @Override
                    public boolean onItemClick(View view, int position, IDrawerItem drawerItem) {
                        // do something with the clicked item :D
                        return true;
                    }
                })
                .build();
*/
        MultiEditText = (AutoCompleteTextView) findViewById(R.id.AutoCompleteTextView);
        MultiEditText2 = (AutoCompleteTextView) findViewById(R.id.AutoCompleteTextView2);
        MultiEditTextLayout = (TextInputLayout) findViewById(R.id.textInputLayout);
        MultiEditTextLayout2 = (TextInputLayout) findViewById(R.id.textInputLayout2);
        mDate = (EditText) findViewById(R.id.editText);
        search_button = (AppCompatButton) findViewById(R.id.button);
        swap_button = (AppCompatButton) findViewById(R.id.swap);
        mDate.setText("сегодня");
        mrv1 = (RecyclerView)findViewById(R.id.rv1);
        mrv1.setHasFixedSize(true);
        llm = new LinearLayoutManager(context);
        mrv1.setLayoutManager(llm);

        ItemClickSupport.addTo(mrv1).setOnItemClickListener(new ItemClickSupport.OnItemClickListener(){
            @Override
            public void onItemClicked(RecyclerView recyclerView, int position, View v) {
                HideKeybClearFocus();
                MultiEditText.setError(null);
                MultiEditText2.setError(null);

                if ((!MultiEditText.getText().toString().equals(recent.get(position).depart)) && (!MultiEditText2.getText().toString().equals(recent.get(position).arrival)))
                    startAnimation(true,true);
                else {
                    if (!MultiEditText.getText().toString().equals(recent.get(position).depart))
                        startAnimation(true, false);
                    if (!MultiEditText2.getText().toString().equals(recent.get(position).arrival))
                        startAnimation(false, true);
                }

                MultiEditText.setText(recent.get(position).depart);
                MultiEditText2.setText(recent.get(position).arrival);
            }
        });
        /*ItemClickSupport.addTo(mrv1).setOnItemLongClickListener (new ItemClickSupport.OnItemLongClickListener() {
            @Override
            public boolean onItemLongClicked(RecyclerView recyclerView, int position, View v) {
                HideKeybClearFocus();
                recent.remove(position);
                deleteAllHistory();
                for (int i = 0; i< recent.size(); i++)
                    insertHistory(recent.get(i).depart, recent.get(i).arrival);
                initializeAdapter();
                adapter.notifyItemRemoved(position);
                return true;
            }
        });*/
        mDate.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                setDate(v);
            }
        });
        search_button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                search(v);
            }
        });
        swap_button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                swap(v);
            }
        });

        mDbHelper = new AppDbHelper(this);

        initializeData();
        fromBasetoArray();
        initializeAdapter();

        MultiEditText.setSelectAllOnFocus(true);
        MultiEditText2.setSelectAllOnFocus(true);

        MultiEditText.setAdapter(new ArrayAdapter<>(this,
                R.layout.simple_dropdown_item_1line, mStations)); //TODO: найти библиотеку окна поиска
        MultiEditText.setOnItemClickListener (new AdapterView.OnItemClickListener() {
            public void onItemClick(AdapterView<?> adapterView , View view , int position ,long arg3)
            {
                HideKeybClearFocus();
            }
        });
        MultiEditText2.setAdapter(new ArrayAdapter<>(this,
                R.layout.simple_dropdown_item_1line, mStations));
        MultiEditText2.setOnItemClickListener (new AdapterView.OnItemClickListener() {
            public void onItemClick(AdapterView<?> adapterView , View view , int position ,long arg3)
            {
                HideKeybClearFocus();
            }
        });

        MultiEditText.setOnFocusChangeListener(new View.OnFocusChangeListener() {
            public void onFocusChange(View v, boolean hasFocus) {
                if (hasFocus) {
                    MultiEditText.setError(null);
                }
            }
        });
        MultiEditText2.setOnFocusChangeListener(new View.OnFocusChangeListener() {
            public void onFocusChange(View v, boolean hasFocus) {
                if (hasFocus) {
                    MultiEditText2.setError(null);
                }
            }
        });

        sp = PreferenceManager.getDefaultSharedPreferences(context);
        new checkNotification().execute();
    }

    //нажатие кнопки Поиск
    public void search(View v) {
        HideKeybClearFocus();
        MultiEditText.setError(null);
        MultiEditText2.setError(null);
        String b1,b2;

        b1 = MultiEditText.getText().toString();
        b2 = MultiEditText2.getText().toString();

        if (b1.isEmpty() || (b1.indexOf(",")<1)) {
            MultiEditText.setError("");
            Snackbar.make(coordLayout, R.string.text_enter_depart_station, LENGTH_VERY_LONG).show();
        }
        else
        if ((b2.isEmpty() || (b2.indexOf(",")<1))
                || (b1.equals(b2))) {
            MultiEditText2.setError("");
            Snackbar.make(coordLayout, R.string.text_enter_arrival_station, LENGTH_VERY_LONG).show();

        }
        else {
            if (mDate.getText().toString().equals("сегодня"))
                mx = new Date(System.currentTimeMillis());
            if (mDate.getText().toString().equals("завтра"))
                mx = new Date(System.currentTimeMillis()+86400000L); //+1day
            if (mDate.getText().toString().equals("на все дни"))
                mx = new Date(1);

            b1 = b1.substring(0, b1.indexOf(","));
            b2 = b2.substring(0, b2.indexOf(","));

            //TODO: добавить проверку наличия станции в списке или запретить свой ввод, только база
            int pos = inHistoryNum(MultiEditText.getText().toString(),MultiEditText2.getText().toString());
            if (pos==-1)
            {
                recent.add(0, new Recent(MultiEditText.getText().toString(),MultiEditText2.getText().toString()));
                deleteAllHistory();
                insertHistory(recent);
                initializeAdapter();
                adapter.notifyItemInserted(0);
                mrv1.smoothScrollToPosition(0);
            }
            else if (pos!=0) {
                recent.remove(pos);
                recent.add(0, new Recent(MultiEditText.getText().toString(),MultiEditText2.getText().toString()));
                deleteAllHistory();
                insertHistory(recent);
                initializeAdapter();
                adapter.notifyItemMoved(pos,0);
            }

            Intent intent = new Intent(context, TrainActivity.class);
            intent.putExtra("depart", b1.replace(" ", "+"));
            intent.putExtra("arrival", b2.replace(" ", "+"));
            intent.putExtra("chosen", mx.getTime());
            startActivity(intent); //передаем управление активити с результатами поиска
        }
    }


    public void swap(View v) {
        HideKeybClearFocus();
        if ((!MultiEditText.getText().toString().equals("")) || (!MultiEditText2.getText().toString().equals(""))) {
            String buf = MultiEditText.getText().toString();
            MultiEditText.setText(MultiEditText2.getText().toString());
            MultiEditText2.setText(buf);
            startAnimation(true, true);
        }

        final Animation animationRotate = AnimationUtils.loadAnimation(this, R.anim.rotate);
        swap_button.startAnimation(animationRotate);
    }

    //проверка уведомлений о перерывах в работе системы покупки билетов
    private class checkNotification extends AsyncTask<String,Integer,Document> {
        @Override
        protected Document doInBackground(String... arg) {
            Document doc;
            Random r;
            do {
                try {
                    r = new Random(System.currentTimeMillis());
                    Thread.sleep(r.nextInt(701));
                }
                catch (InterruptedException ex) {
                    System.out.println("got interrupted!");
                }
            }
            while (!isOnline());

            try {
                    doc = Jsoup.connect("http://poezd.rw.by/wps/portal/home/rp")
                            .userAgent("Mozilla/5.0 (Windows; U; WindowsNT 5.1; en-US; rv1.8.1.6) Gecko/20070725 Firefox/2.0.0.6")
                            .post();
            }
            catch (Exception e) {
                return null;
            }
            return doc;
        }

        @Override
        protected void onPostExecute(Document result) {
            if (result!=null) {
                Element elem = result.select("div.bzd-left-column-block").first();
                if (elem.select("h3").text().contains("Уважаемые")) {
                    final String msg = elem.text();
                    if (!msg.equals(getActivityPreferences("notif_text"))) {
                        AlertDialog.Builder builder = new AlertDialog.Builder(context);
                        builder.setTitle("ВАЖНО")
                                .setMessage(msg)
                                .setCancelable(false)
                                .setPositiveButton("OK",
                                        new DialogInterface.OnClickListener() {
                                            public void onClick(DialogInterface dialog, int id) {
                                                dialog.cancel();
                                            }
                                        })
                                .setNegativeButton("Не напоминать",
                                        new DialogInterface.OnClickListener() {
                                            public void onClick(DialogInterface dialog, int id) {
                                                saveActivityPreferences(msg);
                                                dialog.cancel();
                                            }
                                        });
                        AlertDialog alert = builder.create();
                        alert.show();
                    }
                }
            }
            else { // ошибка соединения/html пуст
                AlertDialog.Builder builder = new AlertDialog.Builder(context);
                builder.setTitle("Ошибка")
                        .setMessage("Ошибка/таймаут соединения")
                        .setCancelable(false)
                        .setPositiveButton("OK",
                                new DialogInterface.OnClickListener() {
                                    public void onClick(DialogInterface dialog, int id) {
                                        dialog.cancel();
                                    }
                                });
                AlertDialog alert = builder.create();
                alert.show();
            }

        }
    }

    private void insertHistory(List<Recent> ins) {
        SQLiteDatabase db = mDbHelper.getWritableDatabase();
        db.beginTransaction();
        try {
            for (int i = 0; i < ins.size(); i++) {
                ContentValues values = new ContentValues();
                values.put(RecentDirections.depart, ins.get(i).depart);
                values.put(RecentDirections.arrival, ins.get(i).arrival);
                long newRowId = db.insert(RecentDirections.TABLE_NAME, null, values);
            }
            db.setTransactionSuccessful();
        }
        finally {
            db.endTransaction();
        }
    }

    private void deleteAllHistory () {
        SQLiteDatabase db = mDbHelper.getWritableDatabase();
        db.beginTransaction();
        try {
            db.execSQL("DROP TABLE IF EXISTS " + RecentDirections.TABLE_NAME);
            db.execSQL("CREATE TABLE " + AppBase.RecentDirections.TABLE_NAME + " ("
                    + AppBase.RecentDirections._ID + " INTEGER PRIMARY KEY AUTOINCREMENT, "
                    + AppBase.RecentDirections.depart + " TEXT NOT NULL, "
                    + AppBase.RecentDirections.arrival + " TEXT NOT NULL);");
            db.setTransactionSuccessful();
        }
        finally {
            db.endTransaction();
        }
    }

    private void fromBasetoArray() {
        // Создадим и откроем для чтения базу данных
        SQLiteDatabase db = mDbHelper.getReadableDatabase();
        db.beginTransaction();
        // Зададим условие для выборки - список столбцов
        String[] projection = {
                RecentDirections._ID,
                RecentDirections.depart,
                RecentDirections.arrival};

        // Делаем запрос
        Cursor cursor = db.query(
                RecentDirections.TABLE_NAME,   // таблица
                projection,            // столбцы
                null,                  // столбцы для условия WHERE
                null,                  // значения для условия WHERE
                null,                  // Don't group the rows
                null,                  // Don't filter by row groups
                null);                   // порядок сортировки

        try {
            // Узнаем индекс каждого столбца
            int IDColumnIndex = cursor.getColumnIndex(RecentDirections._ID);
            int departColumnIndex = cursor.getColumnIndex(RecentDirections.depart);
            int arrivalColumnIndex = cursor.getColumnIndex(RecentDirections.arrival);

            int i=0;
            // Проходим через все ряды
            while (cursor.moveToNext()) {
                // Используем индекс для получения строки или числа
                String currentID = cursor.getString(IDColumnIndex); //в отладочных целях
                String currentDepart = cursor.getString(departColumnIndex);
                String currentArrival = cursor.getString(arrivalColumnIndex);
                // Выводим значения каждого столбца
                recent.add(i, new Recent(currentDepart,currentArrival));
                i++;
            }
            db.setTransactionSuccessful();
        } finally {
            // Всегда закрываем курсор после чтения
            cursor.close();
            db.endTransaction();
        }
    }

    private void initializeData(){
        recent = new ArrayList<>(15);
    }

    private void initializeAdapter(){
        adapter = new RecentRVAdapter(recent);
        mrv1.setAdapter(adapter);
    }

    // установка обработчика выбора даты
    DatePickerDialog.OnDateSetListener dateSetListener=new DatePickerDialog.OnDateSetListener() {
        public void onDateSet(final DatePicker view, int year, int month, int day) {
            date.set(Calendar.YEAR, year);
            date.set(Calendar.MONTH, month);
            date.set(Calendar.DAY_OF_MONTH, day);
            long chosen = date.getTimeInMillis();
            st = System.currentTimeMillis();
            if (chosen<st) {
                mDate.setText("сегодня");
            }
			else {
				if (chosen<st+86402000L) { //1day +2sec
                mDate.setText("завтра");
				}
				else {
					if (chosen>en) {
						mx=new Date(en);
						mDate.setText(df1.format(mx));
						Snackbar.make(coordLayout, R.string.text_set_max_date,Snackbar.LENGTH_LONG).show();
					}
					else {
						mx=new Date(date.getTimeInMillis());
						mDate.setText(df1.format(mx));
					}
				}
			}
        }
    };

    // отображаем диалоговое окно для выбора даты
    public void setDate(View v) {
        HideKeybClearFocus();
        final DatePickerDialog datePickerDialog=new DatePickerDialog(context,dateSetListener,date.get(Calendar.YEAR), date.get(Calendar.MONTH), date.get(Calendar.DAY_OF_MONTH));
        if (mDate.getText().toString().equals("сегодня")) {
            Calendar cal = Calendar.getInstance();
            cal.setTimeInMillis(System.currentTimeMillis());
            datePickerDialog.updateDate(cal.get(Calendar.YEAR),cal.get(Calendar.MONTH),cal.get(Calendar.DAY_OF_MONTH ));

            datePickerDialog.setButton(DialogInterface.BUTTON_NEGATIVE, getString(R.string.datePicker_negativeButton_tomorrow), new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    if (which == DialogInterface.BUTTON_NEGATIVE) {
                        dialog.cancel();
                        mDate.setText("завтра");
                    }
                }
            });
        }
        else if (mDate.getText().toString().equals("завтра")) {
            Calendar cal = Calendar.getInstance();
            cal.setTimeInMillis(System.currentTimeMillis() + 86400000L); //+1day
            datePickerDialog.updateDate(cal.get(Calendar.YEAR),cal.get(Calendar.MONTH),cal.get(Calendar.DAY_OF_MONTH ));

            datePickerDialog.setButton(DialogInterface.BUTTON_NEGATIVE, getString(R.string.datePicker_negativeButton_today), new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    if (which == DialogInterface.BUTTON_NEGATIVE) {
                        dialog.cancel();
                        mDate.setText("сегодня");
                    }
                }
            });
        }
        else {
            datePickerDialog.setButton(DialogInterface.BUTTON_NEGATIVE, getString(R.string.datePicker_negativeButton_today), new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    if (which == DialogInterface.BUTTON_NEGATIVE) {
                        dialog.cancel();
                        mDate.setText("сегодня");
                    }
                }
            });
        }
        /*datePickerDialog.setButton(DialogInterface.BUTTON_POSITIVE, getString(R.string.datePicker_positiveButton), new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                if (which == DialogInterface.BUTTON_POSITIVE) {

                }
            }
        });*/
        datePickerDialog.setButton(DialogInterface.BUTTON_NEUTRAL, getString(R.string.datePicker_neutralButton), new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                if (which == DialogInterface.BUTTON_NEUTRAL) {
                    dialog.cancel();
                    mDate.setText("на все дни");
                }
            }
        });
        datePickerDialog.setTitle(null);
        st = System.currentTimeMillis()-1000;
        datePickerDialog.getDatePicker().setMinDate(st);
        en = st+5184000000L; //+60day
        datePickerDialog.getDatePicker().setMaxDate(en);
        datePickerDialog.show();
    }

    // очистка фокуса (перевод на layout), скрытие клавиатуры
    private void HideKeybClearFocus( ){
        MultiEditText.clearFocus();
        MultiEditText2.clearFocus();
        InputMethodManager inputMethodManager = (InputMethodManager)
                getSystemService(Context.INPUT_METHOD_SERVICE);
        inputMethodManager.hideSoftInputFromWindow(getCurrentFocus().getWindowToken(), 0);
    }

    // определение наличия подключения к Интернет
    private boolean isOnline() {
        ConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo netInfo = cm.getActiveNetworkInfo();
        return netInfo != null && netInfo.isConnectedOrConnecting();
    }

    protected void saveActivityPreferences(String text) {
        SharedPreferences activityPreferences = getPreferences(Activity.MODE_PRIVATE);
        SharedPreferences.Editor editor = activityPreferences.edit();
        editor.putString("notif_text", text);
        editor.apply();
    }

    protected String getActivityPreferences(String param) {
        SharedPreferences activityPreferences = getPreferences(Activity.MODE_PRIVATE);
        if (param.equals("notif_text")) return activityPreferences.getString(param, "");
        else return "";
    }

    // определение наличия/позиции запрашиваемого маршрута в истории
    private int inHistoryNum(String a, String b){
        for (int i = 0; i< recent.size(); i++)
            if ((a.equalsIgnoreCase(recent.get(i).depart)) && (b.equalsIgnoreCase(recent.get(i).arrival)))
                return i;
        return -1;
    }

    // прятать боковую панель при нажатии "Назад" + выход по двойному нажатию
    @Override
    public void onBackPressed() {
        HideKeybClearFocus();
        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        if (drawer.isDrawerOpen(GravityCompat.START)) {
            drawer.closeDrawer(GravityCompat.START);
        } else {
            if (back_pressed + 1000 > System.currentTimeMillis())
                super.onBackPressed();
            else
                Snackbar.make(coordLayout,"Нажмите еще раз для выхода",Snackbar.LENGTH_LONG).show();
                back_pressed = System.currentTimeMillis();
        }
    }

    // анимация изменений в полях ввода
    private void startAnimation(boolean arrival, boolean depart) {
        int duration = 200; // x2
        if (arrival && depart) {
            ObjectAnimator objectAnimator = ObjectAnimator.ofInt(MultiEditTextLayout, "backgroundColor",
                    ContextCompat.getColor(context, R.color.colorRefresh), Color.WHITE).setDuration(duration);
            objectAnimator.setEvaluator(new ArgbEvaluator());
            objectAnimator.start();

            ObjectAnimator objectAnimator2 = ObjectAnimator.ofInt(MultiEditTextLayout2, "backgroundColor",
                    Color.WHITE, ContextCompat.getColor(context, R.color.colorRefresh), Color.WHITE).setDuration(duration*2);
            objectAnimator2.setEvaluator(new ArgbEvaluator());
            objectAnimator2.start();
        }
        else {
            ObjectAnimator objectAnimator;
            if (arrival)
                objectAnimator = ObjectAnimator.ofInt(MultiEditTextLayout, "backgroundColor",
                        ContextCompat.getColor(context, R.color.colorRefresh), Color.WHITE).setDuration(duration);

            else
                objectAnimator = ObjectAnimator.ofInt(MultiEditTextLayout2, "backgroundColor",
                        ContextCompat.getColor(context, R.color.colorRefresh), Color.WHITE).setDuration(duration);

            objectAnimator.setEvaluator(new ArgbEvaluator());
            objectAnimator.start();
        }
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        //getMenuInflater().inflate(R.menu.direction, menu);
        return true;
    }

	// обработчики кнопок тулбара
    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up search_button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement

        return super.onOptionsItemSelected(item);
    }

	//обработчики кнопок боковой панели
    @SuppressWarnings("StatementWithEmptyBody")
    @Override
    public boolean onNavigationItemSelected(MenuItem item) {
        // Handle navigation view item clicks here.
        int id = item.getItemId();

        if (id == R.id.online_scoreboard) { //Онлайн-табло
            Intent intent = new Intent(context, ScoreboardActivity.class);
            startActivity(intent);
            Toast.makeText(context,"Сервис \"Онлайн-табло\" функционирует в режиме опытной эксплуатации", Toast.LENGTH_LONG).show();
        } else if (id == R.id.account) { //Личный кабинет (список пассажиров + предстоящие/совершенные поездки)
            Snackbar.make(coordLayout,"Отображение предстоящих/совершенных поездок, регистрационные данные",Snackbar.LENGTH_LONG).show();
        } else if (id == R.id.data_usage) { // Настройки -> Использование данных
            Intent intent = new Intent();
            intent.setComponent(new ComponentName(
                    "com.android.settings",
                    "com.android.settings.Settings$DataUsageSummaryActivity"));
            startActivity(intent);
            Toast.makeText(context,"Найдите в списке пункт \"БЖД Билеты\"", Toast.LENGTH_LONG).show();
        } else if (id == R.id.app_settings) { //Настройки программы
            Intent intent = new Intent(context, SettingsActivity.class);
            startActivity(intent);
        } else if (id == R.id.app_help) { //Справка
            Snackbar.make(coordLayout,"Отображение справки)",Snackbar.LENGTH_LONG).show();
        } else if (id == R.id.about) { //О программе
            Snackbar.make(coordLayout,"О программе",Snackbar.LENGTH_LONG).show();
        }
        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        drawer.closeDrawer(GravityCompat.START);

        return true;
    }
}
=======
package com.turovetsnikita.belrwclient;

import android.animation.ArgbEvaluator;
import android.animation.ObjectAnimator;
import android.app.Activity;
import android.app.DatePickerDialog;
import android.content.ContentValues;
import android.content.Context;
import android.content.ComponentName;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.AsyncTask;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.support.design.widget.CoordinatorLayout;
import android.support.design.widget.NavigationView;
import android.support.design.widget.Snackbar;
import android.support.design.widget.TextInputLayout;
import android.support.v4.content.ContextCompat;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.AppCompatButton;
import android.support.v7.widget.AppCompatImageButton;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.Toolbar;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.view.inputmethod.InputMethodManager;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.AutoCompleteTextView;
import android.widget.ProgressBar;
import android.widget.Toast;

import org.apache.commons.lang.StringEscapeUtils;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.Random;

import com.turovetsnikita.belrwclient.adapters.ItemClickSupport;
import com.turovetsnikita.belrwclient.data.AppBase;
import com.turovetsnikita.belrwclient.data.AppBase.RecentDirections;
import com.turovetsnikita.belrwclient.data.AppDbHelper;


//TODO: min API operability checked - 19 (4.4)
//TODO: не проработаны ладшафтные ориентации
//TODO: избавитьсся от AlertDialog
//TODO: уведомления об отправлении/скором прибытии

public class DirectionActivity extends AppCompatActivity
        implements NavigationView.OnNavigationItemSelectedListener {
    AutoCompleteTextView mTextView, mTextView2;
    TextInputLayout mTextViewLayout, mTextView2Layout;
    ProgressBar pb1,pb2;
    EditText mDate;
    AppCompatButton search_button,swap_button;
    AppCompatImageButton show_cached;
    RecyclerView mrv1;
    ArrayList<Recent> recent = new ArrayList<>(15);
    LinearLayoutManager llm;
    RecentRVAdapter adapter;
    Locale russian = new Locale("ru");
    Calendar date = Calendar.getInstance();
    SimpleDateFormat df1 = new SimpleDateFormat("EE, dd MMM", russian);

    String searching,from_exp,from_esr,to_exp,to_esr;
    Date mx; //выбранная дата
    long st,en;
    private CoordinatorLayout coordLayout;
    Context context = DirectionActivity.this;
    private static long back_pressed;
    int LENGTH_VERY_LONG = 5000;
    SharedPreferences sp;

    boolean isfirstTextView;
    private AppDbHelper mDbHelper;
    private List<Stations> mStations;
    private List<String> mList;
    private ArrayAdapter<String> mAutoCompleteAdapter;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        setTheme(R.style.AppTheme_NoActionBar);
        super.onCreate(savedInstanceState);
        setContentView(R.layout.nav_view_activity);
        coordLayout = (CoordinatorLayout) findViewById(R.id.coordLayout);

        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        toolbar.setTitle(R.string.title_direction_activity);
        setSupportActionBar(toolbar); //setTitle строго до этой команды

        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        NavigationView navigationView = (NavigationView) findViewById(R.id.nav_view);

        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(
                this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close) {
            @Override
            public void onDrawerOpened(View drawerView) {
                // Code here will be triggered once the drawer open as we dont want anything to happen so we leave this blank
                HideKeybClearFocus();
            }
        };
        drawer.setDrawerListener(toggle);
        toggle.syncState();
        navigationView.setNavigationItemSelectedListener(this);

        mTextView = (AutoCompleteTextView) findViewById(R.id.AutoCompleteTextView);
        mTextView2 = (AutoCompleteTextView) findViewById(R.id.AutoCompleteTextView2);
        mTextViewLayout = (TextInputLayout) findViewById(R.id.textInputLayout);
        mTextView2Layout = (TextInputLayout) findViewById(R.id.textInputLayout2);
        pb1 = (ProgressBar) findViewById(R.id.progress_bar_1);
        pb2 = (ProgressBar) findViewById(R.id.progress_bar_2);
        mDate = (EditText) findViewById(R.id.editText);
        search_button = (AppCompatButton) findViewById(R.id.search);
        swap_button = (AppCompatButton) findViewById(R.id.swap);
        show_cached = (AppCompatImageButton) findViewById(R.id.show_cached);
        mDate.setText("сегодня");
        mrv1 = (RecyclerView)findViewById(R.id.rv1);
        mrv1.setHasFixedSize(true);
        llm = new LinearLayoutManager(context);
        mrv1.setLayoutManager(llm);

        ItemClickSupport.addTo(mrv1).setOnItemClickListener(new ItemClickSupport.OnItemClickListener(){
            @Override
            public void onItemClicked(RecyclerView recyclerView, int position, View v) {
                HideKeybClearFocus();
                mTextView.setError(null);
                mTextView2.setError(null);
/*
                if ((!mTextView.getText().toString().equals(recent.get(position).depart)) && (!mTextView2.getText().toString().equals(recent.get(position).arrival)))
                    startAnimation(true,true);
                else {
                    if (!mTextView.getText().toString().equals(recent.get(position).depart))
                        startAnimation(true, false);
                    if (!mTextView2.getText().toString().equals(recent.get(position).arrival))
                        startAnimation(false, true);
                }
*/

                mTextView.removeTextChangedListener(null);
                mTextView2.removeTextChangedListener(null);

                mTextView.setText(recent.get(position).from_value);
                from_exp= recent.get(position).from_exp;
                from_esr= recent.get(position).from_esr;
                mTextView2.setText(recent.get(position).to_value);
                to_exp= recent.get(position).to_exp;
                to_esr= recent.get(position).to_esr;


                mTextView.addTextChangedListener(new TextWatcher() {
                    @Override
                    public void beforeTextChanged(CharSequence s, int start, int count, int after) {

                    }

                    @Override
                    public void onTextChanged(CharSequence s, int start, int before, int count) {
                        pb1.setVisibility(View.GONE);
                        if (s.length()>2) {
                            searching=String.valueOf(s);
                            isfirstTextView=true;
                            pb1.setVisibility(View.VISIBLE);
                            new getStations().execute();
                        }
                    }

                    @Override
                    public void afterTextChanged(Editable s) {
                    }
                });
                mTextView2.addTextChangedListener(new TextWatcher() {
                    @Override
                    public void beforeTextChanged(CharSequence s, int start, int count, int after) {

                    }

                    @Override
                    public void onTextChanged(CharSequence s, int start, int before, int count) {
                        pb2.setVisibility(View.GONE);
                        if (s.length()>2) {
                            searching=String.valueOf(s);
                            isfirstTextView=false;
                            pb2.setVisibility(View.VISIBLE);
                            new getStations().execute();
                        }
                    }

                    @Override
                    public void afterTextChanged(Editable s) {
                    }
                });
            }
        });
        ItemClickSupport.addTo(mrv1).setOnItemLongClickListener (new ItemClickSupport.OnItemLongClickListener() {
            @Override
            public boolean onItemLongClicked(RecyclerView recyclerView, int position, View v) {
                HideKeybClearFocus();
                recent.remove(position);
                deleteAllHistory();
                insertHistory(recent);
                initializeAdapter();
                adapter.notifyItemRemoved(position);
                return true;
            }
        });
        mDate.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                setDate(v);
            }
        });
        search_button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                search(v);
            }
        });
        swap_button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                swap(v);
            }
        });
        show_cached.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent(context, StationsActivity.class);
                startActivity(intent);
            }
        });

        mDbHelper = new AppDbHelper(this);

        initializeData();
        fromBasetoArray();
        initializeAdapter();

        mTextView.setSelectAllOnFocus(true);
        mTextView2.setSelectAllOnFocus(true);

        prepareList();
        mAutoCompleteAdapter = new ArrayAdapter<>(this,android.R.layout.simple_dropdown_item_1line, mList);

        mTextView.setAdapter(mAutoCompleteAdapter);
        mTextView2.setAdapter(mAutoCompleteAdapter);

        mTextView.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                pb1.setVisibility(View.GONE);
                if (s.length()>2) {
                    searching=String.valueOf(s);
                    isfirstTextView=true;
                    pb1.setVisibility(View.VISIBLE);
                    new getStations().execute();
                }
            }

            @Override
            public void afterTextChanged(Editable s) {
            }
        });

        mTextView2.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                pb2.setVisibility(View.GONE);
                if (s.length()>2) {
                    searching=String.valueOf(s);
                    isfirstTextView=false;
                    pb2.setVisibility(View.VISIBLE);
                    new getStations().execute();
                }
            }

            @Override
            public void afterTextChanged(Editable s) {
            }
        });

        mTextView.setOnItemClickListener (new AdapterView.OnItemClickListener() {
            public void onItemClick(AdapterView<?> adapterView , View view , int position ,long arg3)
            {
                mTextView.removeTextChangedListener(null);
                mTextView2.removeTextChangedListener(null);

                mTextView.setText(mStations.get(position).value);
                from_exp= mStations.get(position).exp;
                from_esr= mStations.get(position).esr;
                HideKeybClearFocus();

                mTextView.addTextChangedListener(new TextWatcher() {
                    @Override
                    public void beforeTextChanged(CharSequence s, int start, int count, int after) {

                    }

                    @Override
                    public void onTextChanged(CharSequence s, int start, int before, int count) {
                        pb1.setVisibility(View.GONE);
                        if (s.length()>2) {
                            searching=String.valueOf(s);
                            isfirstTextView=true;
                            pb1.setVisibility(View.VISIBLE);
                            new getStations().execute();
                        }
                    }

                    @Override
                    public void afterTextChanged(Editable s) {
                    }
                });
                mTextView2.addTextChangedListener(new TextWatcher() {
                    @Override
                    public void beforeTextChanged(CharSequence s, int start, int count, int after) {

                    }

                    @Override
                    public void onTextChanged(CharSequence s, int start, int before, int count) {
                        pb2.setVisibility(View.GONE);
                        if (s.length()>2) {
                            searching=String.valueOf(s);
                            isfirstTextView=false;
                            pb2.setVisibility(View.VISIBLE);
                            new getStations().execute();
                        }
                    }

                    @Override
                    public void afterTextChanged(Editable s) {
                    }
                });
            }
        });

        mTextView2.setOnItemClickListener (new AdapterView.OnItemClickListener() {
            public void onItemClick(AdapterView<?> adapterView , View view , int position ,long arg3)
            {
                mTextView2.setText(mStations.get(position).value);
                to_exp= mStations.get(position).exp;
                to_esr= mStations.get(position).esr;
                HideKeybClearFocus();
            }
        });

        mTextView.setOnFocusChangeListener(new View.OnFocusChangeListener() {
            public void onFocusChange(View v, boolean hasFocus) {
                if (!hasFocus) {
                    mTextView.removeTextChangedListener(null);
                    mTextView.addTextChangedListener(new TextWatcher() {
                        @Override
                        public void beforeTextChanged(CharSequence s, int start, int count, int after) {

                        }

                        @Override
                        public void onTextChanged(CharSequence s, int start, int before, int count) {
                            pb1.setVisibility(View.GONE);
                            if (s.length()>2) {
                                searching=String.valueOf(s);
                                isfirstTextView=true;
                                pb1.setVisibility(View.VISIBLE);
                                new getStations().execute();
                            }
                        }

                        @Override
                        public void afterTextChanged(Editable s) {
                        }
                    });
                }
            }
        });
        mTextView2.setOnFocusChangeListener(new View.OnFocusChangeListener() {
            public void onFocusChange(View v, boolean hasFocus) {
                if (!hasFocus) {
                    mTextView2.removeTextChangedListener(null);
                    mTextView2.addTextChangedListener(new TextWatcher() {
                        @Override
                        public void beforeTextChanged(CharSequence s, int start, int count, int after) {

                        }

                        @Override
                        public void onTextChanged(CharSequence s, int start, int before, int count) {
                            pb2.setVisibility(View.GONE);
                            if (s.length()>2) {
                                searching=String.valueOf(s);
                                isfirstTextView=false;
                                pb2.setVisibility(View.VISIBLE);
                                new getStations().execute();
                            }
                        }

                        @Override
                        public void afterTextChanged(Editable s) {
                        }
                    });
                }
            }
        });

        sp = PreferenceManager.getDefaultSharedPreferences(context);
        new checkNotification().execute();
    }

    //нажатие кнопки Поиск
    public void search(View v) {
        HideKeybClearFocus();
        mTextView.setError(null);
        mTextView2.setError(null);

        if (mTextView.getText().toString().isEmpty()) {
            mTextView.setError("");
            Snackbar.make(coordLayout, R.string.text_enter_depart_station, LENGTH_VERY_LONG).show();
        }
        else
        if (mTextView2.getText().toString().isEmpty()) {
            mTextView2.setError("");
            Snackbar.make(coordLayout, R.string.text_enter_arrival_station, LENGTH_VERY_LONG).show();

        }
        else {
            if (mDate.getText().toString().equals("сегодня"))
                mx = new Date(System.currentTimeMillis());
            if (mDate.getText().toString().equals("завтра"))
                mx = new Date(System.currentTimeMillis()+86400000L); //+1day
            if (mDate.getText().toString().equals("на все дни"))
                mx = new Date(1);

            //TODO: отдельный диалог для ввода
            int pos = inHistoryNum();
            if (pos==-1)
            {
                recent.add(0, new Recent(mTextView.getText().toString(),
                        from_exp,
                        from_esr,
                        mTextView2.getText().toString(),
                        to_exp,
                        to_esr));
                deleteAllHistory();
                insertHistory(recent);
                initializeAdapter();
                adapter.notifyItemInserted(0);
                mrv1.smoothScrollToPosition(0);
            }
            else if (pos!=0) {
                recent.remove(pos);
                recent.add(0, new Recent(mTextView.getText().toString(),
                        from_exp,
                        from_esr,
                        mTextView2.getText().toString(),
                        to_exp,
                        to_esr));
                deleteAllHistory();
                insertHistory(recent);
                initializeAdapter();
                adapter.notifyItemMoved(pos,0);
            }

            Intent intent = new Intent(context, TrainActivity.class);
            intent.putExtra("from_value", mTextView.getText().toString());
            intent.putExtra("from_exp", from_exp);
            intent.putExtra("from_esr", from_esr);
            intent.putExtra("to_value", mTextView2.getText().toString());
            intent.putExtra("to_exp", to_exp);
            intent.putExtra("to_esr", to_esr);
            intent.putExtra("chosen", mx.getTime());
            startActivity(intent); //передаем управление активити с результатами поиска
        }
    }

    public void swap(View v) {
        HideKeybClearFocus();
        if ((!mTextView.getText().toString().equals("")) || (!mTextView2.getText().toString().equals(""))) {
            String value_buf = mTextView.getText().toString();
            mTextView.setText(mTextView2.getText().toString());
            mTextView2.setText(value_buf);

            String exp_buf = from_exp;
            from_exp = to_exp;
            to_exp = exp_buf;

            String esr_buf = from_esr;
            from_esr = to_esr;
            to_esr = esr_buf;

            startAnimation(true, true);
        }

        final Animation animationRotate = AnimationUtils.loadAnimation(this, R.anim.rotate);
        swap_button.startAnimation(animationRotate);
    }

    private void prepareList() {
        // подготовим список для автозаполнения
        mList = new ArrayList<>();
    }

    //подсказки в autocompletetextiew
    private class getStations extends AsyncTask<String,Integer,Document> {
        @Override
        protected Document doInBackground(String... arg) {
            Document doc;

            try {
                doc = Jsoup.connect("http://rasp.rw.by/ru/ajax/autocomplete/search/?term="+searching)
                        .userAgent("Mozilla/5.0 (Windows; U; WindowsNT 5.1; en-US; rv1.8.1.6) Gecko/20070725 Firefox/2.0.0.6")
                        .post();
            }
            catch (Exception e) {
                return null;
            }
            return doc;
        }

        @Override
        protected void onPostExecute(Document result) {
            if (result!=null) {
                prepareList();
                grabStations(result.select("body").toString());

                if (mStations!=null) {
                    for (int i=0;i<mStations.size();i++)
                        mList.add(mStations.get(i).label);

                    mAutoCompleteAdapter = new ArrayAdapter<>(context,android.R.layout.simple_dropdown_item_1line, mList);
                    if (isfirstTextView) {
                        mTextView.setAdapter(mAutoCompleteAdapter);
                        pb1.setVisibility(View.GONE);
                    }
                    else {
                        mTextView2.setAdapter(mAutoCompleteAdapter);
                        pb2.setVisibility(View.GONE);
                    }
                }
                else {
                    Toast.makeText(context,"error_processing_data", Toast.LENGTH_LONG).show();
                }
            }
            else {
                Toast.makeText(context,"error_timeout", Toast.LENGTH_LONG).show();
            }

            if (isfirstTextView) {
                pb1.setVisibility(View.GONE);
            }
            else {
                pb2.setVisibility(View.GONE);
            }

        }
    }

    //проверка уведомлений о перерывах в работе системы покупки билетов
    private class checkNotification extends AsyncTask<String,Integer,Document> {
        @Override
        protected Document doInBackground(String... arg) {
            Document doc;
            Random r;
            do {
                try {
                    r = new Random(System.currentTimeMillis());
                    Thread.sleep(r.nextInt(701));
                }
                catch (InterruptedException ex) {
                    System.out.println("got interrupted!");
                }
            }
            while (!isOnline());

            try {
                    doc = Jsoup.connect("http://poezd.rw.by/wps/portal/home/rp")
                            .userAgent("Mozilla/5.0 (Windows; U; WindowsNT 5.1; en-US; rv1.8.1.6) Gecko/20070725 Firefox/2.0.0.6")
                            .post();
            }
            catch (Exception e) {
                return null;
            }
            return doc;
        }

        @Override
        protected void onPostExecute(Document result) {
            if (result!=null) {
                Element elem = result.select("div.bzd-left-column-block").first();
                if (elem.select("h3").text().contains("Уважаемые")) {
                    final String msg = elem.text();
                    if (!msg.equals(getActivityPreferences("notif_text"))) {
                        AlertDialog.Builder builder = new AlertDialog.Builder(context);
                        builder.setTitle("ВАЖНО")
                                .setMessage(msg)
                                .setCancelable(false)
                                .setPositiveButton("OK",
                                        new DialogInterface.OnClickListener() {
                                            public void onClick(DialogInterface dialog, int id) {
                                                dialog.cancel();
                                            }
                                        })
                                .setNegativeButton("Не напоминать",
                                        new DialogInterface.OnClickListener() {
                                            public void onClick(DialogInterface dialog, int id) {
                                                saveActivityPreferences(msg);
                                                dialog.cancel();
                                            }
                                        });
                        AlertDialog alert = builder.create();
                        alert.show();
                    }
                }
            }
            else { // ошибка соединения/html пуст
                AlertDialog.Builder builder = new AlertDialog.Builder(context);
                builder.setTitle("Ошибка")
                        .setMessage("Ошибка/таймаут соединения")
                        .setCancelable(false)
                        .setPositiveButton("OK",
                                new DialogInterface.OnClickListener() {
                                    public void onClick(DialogInterface dialog, int id) {
                                        dialog.cancel();
                                    }
                                });
                AlertDialog alert = builder.create();
                alert.show();
            }

        }
    }


    //непосредственно граббинг станций
    public void grabStations(String stations) {
        stations = StringEscapeUtils.unescapeJava(stations); // "расшифровка" unicode

        mStations = new ArrayList<>();
        List<Stations> res= new ArrayList<>();

        String label,value,exp,esr;

        do {
            do {
                stations = cutToParam(stations, "label"); //убираем лишнее
                label = getParam(stations, "label");
                value = getParam(stations, "value");
                exp = getParam(stations, "exp");
                esr = getParam(stations, "ecp");
                stations = cutToParam(stations, "otd");  //убираем лишнее
                res.add(new Stations(label,value,exp,esr));
            } while (getParamPos(stations,"label")!=-1);
            stations="";
        } while (stations.length()>0);

        for (int i = 0; i < res.size(); i++)
            mStations.add(res.get(i));
    }

    public String getParam (String source, String param) { //string, byte, boolean
        source = cutToParam(source,param);
        param = "\"" + param + "\"";
        if (source.contains(param)) {
            source = source.substring(source.indexOf(param)+param.length()+1, source.indexOf(",\""));
            source = source.replace("\"","");
            source = source.replace(",",".");
        }
        else source = "";
        return source;
    }

    public Integer getParamPos (String source, String param) {
        param = "\"" + param + "\"";
        Integer res;
        if (source.contains(param)) res = source.indexOf(param);
        else res = -1;
        return res;
    }

    public String cutToParam(String source, String param) {
        param = "\"" + param + "\"";
        String buf;
        buf = source;
        if (buf.contains(param)) {
            buf = buf.substring(buf.indexOf(param), buf.length());
        }
        else buf = "";
        return buf;
    }

    private void insertHistory(List<Recent> ins) {
        SQLiteDatabase db = mDbHelper.getWritableDatabase();
        db.beginTransaction();
        try {
            for (int i = 0; i < ins.size(); i++) {
                ContentValues values = new ContentValues();
                values.put(RecentDirections.from_value, ins.get(i).from_value);
                values.put(RecentDirections.from_exp, ins.get(i).from_exp);
                values.put(RecentDirections.from_esr, ins.get(i).from_esr);
                values.put(RecentDirections.to_value, ins.get(i).to_value);
                values.put(RecentDirections.to_exp, ins.get(i).to_exp);
                values.put(RecentDirections.to_esr, ins.get(i).to_esr);
                long newRowId = db.insert(RecentDirections.TABLE_NAME, null, values);
            }
            db.setTransactionSuccessful();
        }
        finally {
            db.endTransaction();
        }
    }

    private void deleteAllHistory () {
        SQLiteDatabase db = mDbHelper.getWritableDatabase();
        db.beginTransaction();
        try {
            db.execSQL("DROP TABLE IF EXISTS " + RecentDirections.TABLE_NAME);
            db.execSQL("CREATE TABLE " + AppBase.RecentDirections.TABLE_NAME + " ("
                    + AppBase.RecentDirections._ID + " INTEGER PRIMARY KEY AUTOINCREMENT, "
                    + AppBase.RecentDirections.from_value + " TEXT NOT NULL, "
                    + AppBase.RecentDirections.from_exp + " TEXT NOT NULL, "
                    + AppBase.RecentDirections.from_esr + " TEXT NOT NULL, "
                    + AppBase.RecentDirections.to_value + " TEXT NOT NULL, "
                    + AppBase.RecentDirections.to_exp + " TEXT NOT NULL, "
                    + AppBase.RecentDirections.to_esr + " TEXT NOT NULL);");
            db.setTransactionSuccessful();
        }
        finally {
            db.endTransaction();
        }
    }

    private void fromBasetoArray() {
        // Создадим и откроем для чтения базу данных
        SQLiteDatabase db = mDbHelper.getReadableDatabase();
        db.beginTransaction();
        // Зададим условие для выборки - список столбцов
        String[] projection = {
                RecentDirections._ID,
                RecentDirections.from_value,
                RecentDirections.from_exp,
                RecentDirections.from_esr,
                RecentDirections.to_value,
                RecentDirections.to_exp,
                RecentDirections.to_esr};

        // Делаем запрос
        Cursor cursor = db.query(
                RecentDirections.TABLE_NAME,   // таблица
                projection,            // столбцы
                null,                  // столбцы для условия WHERE
                null,                  // значения для условия WHERE
                null,                  // Don't group the rows
                null,                  // Don't filter by row groups
                null);                   // порядок сортировки

        try {
            // Узнаем индекс каждого столбца
            int IDColumnIndex = cursor.getColumnIndex(RecentDirections._ID);
            int from_valueColumnIndex = cursor.getColumnIndex(RecentDirections.from_value);
            int from_expColumnIndex = cursor.getColumnIndex(RecentDirections.from_exp);
            int from_esrColumnIndex = cursor.getColumnIndex(RecentDirections.from_esr);
            int to_valueColumnIndex = cursor.getColumnIndex(RecentDirections.to_value);
            int to_expColumnIndex = cursor.getColumnIndex(RecentDirections.to_exp);
            int to_esrColumnIndex = cursor.getColumnIndex(RecentDirections.to_esr);

            int i=0;
            // Проходим через все ряды
            while (cursor.moveToNext()) {
                // Используем индекс для получения строки или числа
                String currentID = cursor.getString(IDColumnIndex); //в отладочных целях
                String currentFrom_value = cursor.getString(from_valueColumnIndex);
                String currentFrom_exp = cursor.getString(from_expColumnIndex);
                String currentFrom_esr = cursor.getString(from_esrColumnIndex);
                String currentTo_value = cursor.getString(to_valueColumnIndex);
                String currentTo_exp = cursor.getString(to_expColumnIndex);
                String currentTo_esr = cursor.getString(to_esrColumnIndex);
                // Выводим значения каждого столбца
                recent.add(i, new Recent(currentFrom_value,currentFrom_exp,currentFrom_esr,
                        currentTo_value,currentTo_exp,currentTo_esr));
                i++;
            }
            db.setTransactionSuccessful();
        } finally {
            // Всегда закрываем курсор после чтения
            cursor.close();
            db.endTransaction();
        }
    }

    private void initializeData(){
        recent = new ArrayList<>(15);
    }

    private void initializeAdapter(){
        adapter = new RecentRVAdapter(recent);
        mrv1.setAdapter(adapter);
    }

    // установка обработчика выбора даты
    DatePickerDialog.OnDateSetListener dateSetListener=new DatePickerDialog.OnDateSetListener() {
        public void onDateSet(final DatePicker view, int year, int month, int day) {
            date.set(Calendar.YEAR, year);
            date.set(Calendar.MONTH, month);
            date.set(Calendar.DAY_OF_MONTH, day);
            long chosen = date.getTimeInMillis();
            st = System.currentTimeMillis();
            if (chosen<st) {
                mDate.setText("сегодня");
            }
			else {
				if (chosen<st+86402000L) { //1day +2sec
                mDate.setText("завтра");
				}
				else {
					if (chosen>en) {
						mx=new Date(en);
						mDate.setText(df1.format(mx));
						Snackbar.make(coordLayout, R.string.text_set_max_date,Snackbar.LENGTH_LONG).show();
					}
					else {
						mx=new Date(date.getTimeInMillis());
						mDate.setText(df1.format(mx));
					}
				}
			}
        }
    };

    // отображаем диалоговое окно для выбора даты
    public void setDate(View v) {
        HideKeybClearFocus();
        final DatePickerDialog datePickerDialog=new DatePickerDialog(context,dateSetListener,date.get(Calendar.YEAR), date.get(Calendar.MONTH), date.get(Calendar.DAY_OF_MONTH));
        if (mDate.getText().toString().equals("сегодня")) {
            Calendar cal = Calendar.getInstance();
            cal.setTimeInMillis(System.currentTimeMillis());
            datePickerDialog.updateDate(cal.get(Calendar.YEAR),cal.get(Calendar.MONTH),cal.get(Calendar.DAY_OF_MONTH ));

            datePickerDialog.setButton(DialogInterface.BUTTON_NEGATIVE, getString(R.string.datePicker_negativeButton_tomorrow), new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    if (which == DialogInterface.BUTTON_NEGATIVE) {
                        dialog.cancel();
                        mDate.setText("завтра");
                    }
                }
            });
        }
        else if (mDate.getText().toString().equals("завтра")) {
            Calendar cal = Calendar.getInstance();
            cal.setTimeInMillis(System.currentTimeMillis() + 86400000L); //+1day
            datePickerDialog.updateDate(cal.get(Calendar.YEAR),cal.get(Calendar.MONTH),cal.get(Calendar.DAY_OF_MONTH ));

            datePickerDialog.setButton(DialogInterface.BUTTON_NEGATIVE, getString(R.string.datePicker_negativeButton_today), new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    if (which == DialogInterface.BUTTON_NEGATIVE) {
                        dialog.cancel();
                        mDate.setText("сегодня");
                    }
                }
            });
        }
        else {
            datePickerDialog.setButton(DialogInterface.BUTTON_NEGATIVE, getString(R.string.datePicker_negativeButton_today), new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    if (which == DialogInterface.BUTTON_NEGATIVE) {
                        dialog.cancel();
                        mDate.setText("сегодня");
                    }
                }
            });
        }
        /*datePickerDialog.setButton(DialogInterface.BUTTON_POSITIVE, getString(R.string.datePicker_positiveButton), new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                if (which == DialogInterface.BUTTON_POSITIVE) {

                }
            }
        });*/
        datePickerDialog.setButton(DialogInterface.BUTTON_NEUTRAL, getString(R.string.datePicker_neutralButton), new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                if (which == DialogInterface.BUTTON_NEUTRAL) {
                    dialog.cancel();
                    mDate.setText("на все дни");
                }
            }
        });
        datePickerDialog.setTitle(null);
        st = System.currentTimeMillis()-1000;
        datePickerDialog.getDatePicker().setMinDate(st);
        en = st+5184000000L; //+60day
        datePickerDialog.getDatePicker().setMaxDate(en);
        datePickerDialog.show();
    }

    // очистка фокуса (перевод на layout), скрытие клавиатуры
    private void HideKeybClearFocus( ){
        mTextView.clearFocus();
        mTextView2.clearFocus();
        InputMethodManager inputMethodManager = (InputMethodManager)
                getSystemService(Context.INPUT_METHOD_SERVICE);
        inputMethodManager.hideSoftInputFromWindow(getCurrentFocus().getWindowToken(), 0);
    }

    // определение наличия подключения к Интернет
    private boolean isOnline() {
        ConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo netInfo = cm.getActiveNetworkInfo();
        return netInfo != null && netInfo.isConnectedOrConnecting();
    }

    protected void saveActivityPreferences(String text) {
        SharedPreferences activityPreferences = getPreferences(Activity.MODE_PRIVATE);
        SharedPreferences.Editor editor = activityPreferences.edit();
        editor.putString("notif_text", text);
        editor.apply();
    }

    protected String getActivityPreferences(String param) {
        SharedPreferences activityPreferences = getPreferences(Activity.MODE_PRIVATE);
        if (param.equals("notif_text")) return activityPreferences.getString(param, "");
        else return "";
    }

    // определение наличия/позиции запрашиваемого маршрута в истории
    private int inHistoryNum(){
        for (int i = 0; i< recent.size(); i++)
            if ((mTextView.getText().toString().equals(recent.get(i).from_value))
                    && (from_exp.equals(recent.get(i).from_exp))
                    && (from_esr.equals(recent.get(i).from_esr))
                    && (mTextView2.getText().toString().equals(recent.get(i).to_value))
                    && (to_exp.equals(recent.get(i).to_exp))
                    && (to_esr.equals(recent.get(i).to_esr)))
                return i;
        return -1;
    }

    // прятать боковую панель при нажатии "Назад" + выход по двойному нажатию
    @Override
    public void onBackPressed() {
        HideKeybClearFocus();
        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        if (drawer.isDrawerOpen(GravityCompat.START)) {
            drawer.closeDrawer(GravityCompat.START);
        } else {
            if (back_pressed + 1000 > System.currentTimeMillis())
                super.onBackPressed();
            else
                Snackbar.make(coordLayout,"Нажмите еще раз для выхода",Snackbar.LENGTH_LONG).show();
                back_pressed = System.currentTimeMillis();
        }
    }

    // анимация изменений в полях ввода
    private void startAnimation(boolean arrival, boolean depart) {
        int duration = 200;
        if (arrival && depart) {
            ObjectAnimator objectAnimator = ObjectAnimator.ofInt(mTextView, "textColor",
                    Color.WHITE, ContextCompat.getColor(context, R.color.colorBlack)).setDuration(duration);
            objectAnimator.setEvaluator(new ArgbEvaluator());
            objectAnimator.start();

            ObjectAnimator objectAnimator2 = ObjectAnimator.ofInt(mTextView2, "textColor",
                    Color.WHITE, Color.WHITE, ContextCompat.getColor(context, R.color.colorBlack)).setDuration(duration*2);
            objectAnimator2.setEvaluator(new ArgbEvaluator());
            objectAnimator2.start();
        }
        else {
            ObjectAnimator objectAnimator;
            if (arrival)
                objectAnimator = ObjectAnimator.ofInt(mTextView, "textColor",
                        Color.WHITE, ContextCompat.getColor(context, R.color.colorBlack)).setDuration(duration);

            else
                objectAnimator = ObjectAnimator.ofInt(mTextView2, "textColor",
                        Color.WHITE, ContextCompat.getColor(context, R.color.colorBlack)).setDuration(duration);

            objectAnimator.setEvaluator(new ArgbEvaluator());
            objectAnimator.start();
        }
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        //getMenuInflater().inflate(R.menu.direction, menu);
        return true;
    }

	// обработчики кнопок тулбара
    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up search_button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement

        return super.onOptionsItemSelected(item);
    }

	//обработчики кнопок боковой панели
    @SuppressWarnings("StatementWithEmptyBody")
    @Override
    public boolean onNavigationItemSelected(MenuItem item) {
        // Handle navigation view item clicks here.
        int id = item.getItemId();

        if (id == R.id.online_scoreboard) { //Онлайн-табло
            Intent intent = new Intent(context, ScoreboardActivity.class);
            startActivity(intent);
            Toast.makeText(context,"Сервис \"Онлайн-табло\" функционирует в режиме опытной эксплуатации", Toast.LENGTH_LONG).show();
        } else if (id == R.id.account) { //Личный кабинет (список пассажиров + предстоящие/совершенные поездки)
            Snackbar.make(coordLayout,"Отображение предстоящих/совершенных поездок, регистрационные данные",Snackbar.LENGTH_LONG).show();
        } else if (id == R.id.data_usage) { // Настройки -> Использование данных
            Intent intent = new Intent();
            intent.setComponent(new ComponentName(
                    "com.android.settings",
                    "com.android.settings.Settings$DataUsageSummaryActivity"));
            startActivity(intent);
            Toast.makeText(context,"Найдите в списке пункт \"БЖД Билеты\"", Toast.LENGTH_LONG).show();
        } else if (id == R.id.app_settings) { //Настройки программы
            Intent intent = new Intent(context, SettingsActivity.class);
            startActivity(intent);
        } else if (id == R.id.app_help) { //Справка
            Snackbar.make(coordLayout,"Отображение справки)",Snackbar.LENGTH_LONG).show();
        } else if (id == R.id.about) { //О программе
            Snackbar.make(coordLayout,"О программе",Snackbar.LENGTH_LONG).show();
        }
        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        drawer.closeDrawer(GravityCompat.START);

        return true;
    }
}
>>>>>>> Stashed changes
